---
import '~/styles/index.css'
import '~/styles/heti.min.css'
import Header from '~/components/Header.astro'
import Footer from '~/components/Footer.astro'
import { ViewTransitions } from 'astro:transitions'
import { SEO } from 'astro-seo'
import { getImage } from 'astro:assets'

interface Props {
  title?: string
  desc?: string
  banner?: ImageMetadata
}

const { title: propsTitle, desc: propsDesc, banner } = Astro.props
const {
  config: {
    title: configTitle,
    desc: configDesc,
    website: canonical,
    header
  }
} = Astro.locals;

// 合并标题和描述，使用空字符串作为回退
const title = propsTitle ?? configTitle ?? ''
const desc = propsDesc ?? configDesc ?? ''

// 缓存优化后的图片 URL
let optimizedImage: string | null = null

// 图片处理封装为独立函数
async function getOptimizedImage(): Promise<string> {
  if (optimizedImage) {
    return optimizedImage // 从缓存中获取
  }

  if (!banner) {
    optimizedImage = '/placeholder.png'
    return optimizedImage
  }

  try {
    const image = await getImage({ src: banner, format: 'jpeg' })
    optimizedImage = new URL(image.src, Astro.url).toString()
    return optimizedImage
  } catch (error) {
    console.error('Image processing failed:', error)
    optimizedImage = new URL('/placeholder.png', Astro.url).toString()
    return optimizedImage
  }
}

const optimizedImageSrc = await getOptimizedImage()

// 固定推特卡片类型，动态内容后置
const twitterMeta = [
  { name: 'twitter:card', content: 'summary_large_image' },
  { name: 'twitter:image:src', content: optimizedImageSrc },
  { name: 'twitter:image:alt', content: desc },
  { name: 'twitter:title', content: title },
  { name: 'twitter:description', content: desc },
]

// 仅在有效时添加创作者信息
if (header?.twitter) {
  twitterMeta.push(
    { name: 'twitter:creator', content: header.twitter },
    { name: 'twitter:site', content: header.twitter }
  )
}
---

<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <ViewTransitions />
    <SEO
      charset="utf-8"
      title={title}
      description={desc}
      extend={{
        link: [{ rel: 'icon', href: '/favicon.ico', type: 'image/svg+xml' }],
        meta: twitterMeta,
      }}
      openGraph={{
        basic: {
          title,
          type: "article",
          image: optimizedImageSrc,
          url: canonical,
        }
      }}
    </head>
  <body>
    <div class="container contain-layout m-a" un-max-lg="animate-fadein-down" un-lg="flex flex-row-reverse justify-between gap-4 px-8 mx-auto max-w-6xl">
      <aside un-lg="sticky top-0 h-screen py-20 animate-fadein-left gap-8" un-lg:flex="~ col justify-between items-start gap-4" class="p-7.5">
        <Header />
        <Footer class="max-lg:hidden" />
      </aside>

      <main un-lg="py-20 min-w-xl animate-fadein-down" class="p-7.5">
        <slot />
      </main>

      <Footer class="lg:hidden p-7.5" />
    </div>
    <script>
      function loadCSS(url: string) {
        fetch(url)
          .then(response => response.text())
          .then(css => {
            var style = document.createElement("style");
            style.textContent = css;
            document.head.appendChild(style);
          });
      }

      // 延迟一段时间后加载 CSS
      setTimeout(() => {
        loadCSS("/css/_@astro-renderers.Cgf4Dj1D.css");
      }, 50); // 延迟 50 毫秒
    </script>
  </body>
</html>